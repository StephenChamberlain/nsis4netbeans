/* Generated By:JavaCC: Do not edit this line. NSISParserTokenManager.java */
package uk.co.chamberlain.netbeans.nsis.javacc.lexer;

/** Token Manager. */
public class NSISParserTokenManager implements NSISParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffffffc900L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0xfeff80000003ffffL) != 0L)
         {
            jjmatchedKind = 268;
            return 50;
         }
         if ((active0 & 0x8L) != 0L || (active4 & 0x4020000000000L) != 0L)
            return 3;
         if ((active4 & 0x400000000400000L) != 0L)
            return 17;
         return -1;
      case 1:
         if ((active0 & 0xffffffffffffc900L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0xfeff80000003ffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 268;
               jjmatchedPos = 1;
            }
            return 50;
         }
         if ((active0 & 0x8L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0xffffffffffffc900L) != 0L || (active1 & 0xfefdffffffffffffL) != 0L || (active2 & 0xefffffffffffffffL) != 0L || (active3 & 0xf6ff80000003ffffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 268;
               jjmatchedPos = 2;
            }
            return 50;
         }
         if ((active1 & 0x102000000000000L) != 0L || (active2 & 0x1000000000000000L) != 0L || (active3 & 0x800000000000000L) != 0L)
            return 50;
         return -1;
      case 3:
         if ((active0 & 0x83c0000000c00000L) != 0L || (active1 & 0x6f4002000207ff9L) != 0L)
            return 50;
         if ((active0 & 0x7c3fffffff3fc900L) != 0L || (active1 & 0xf809ffdfffdf8006L) != 0L || (active2 & 0xefffffffffffffffL) != 0L || (active3 & 0xf6ff80000003ffffL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 268;
               jjmatchedPos = 3;
            }
            return 50;
         }
         return -1;
      case 4:
         if ((active0 & 0x7f3fffffffbf8900L) != 0L || (active1 & 0xf8e9ffdeffdfffffL) != 0L || (active2 & 0xefeffffffffffff7L) != 0L || (active3 & 0xf6ff80000003ffffL) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 4;
            return 50;
         }
         if ((active0 & 0x4000L) != 0L || (active1 & 0x100000000L) != 0L || (active2 & 0x10000000000008L) != 0L)
            return 50;
         return -1;
      case 5:
         if ((active0 & 0x7f3fb83fffbb8900L) != 0L || (active1 & 0x7829bfd0ffdfffffL) != 0L || (active2 & 0xe50ffffffffffff0L) != 0L || (active3 & 0xf6ff80000003ffffL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 268;
               jjmatchedPos = 5;
            }
            return 50;
         }
         if ((active0 & 0x47c000040000L) != 0L || (active1 & 0x80c0400e00000000L) != 0L || (active2 & 0xae0000000000007L) != 0L)
            return 50;
         return -1;
      case 6:
         if ((active0 & 0x300001010800L) != 0L || (active1 & 0x8800400400000L) != 0L || (active2 & 0x20400080000ff570L) != 0L || (active3 & 0x4000L) != 0L)
            return 50;
         if ((active0 & 0x7f3f8bfffeba8100L) != 0L || (active1 & 0x78a13fd0ff9fffffL) != 0L || (active2 & 0xc50fff7ffff00a80L) != 0L || (active3 & 0xf6ff80000003bfffL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 268;
               jjmatchedPos = 6;
            }
            return 50;
         }
         return -1;
      case 7:
         if ((active0 & 0x3e3f8bfdfcba8000L) != 0L || (active1 & 0x78a13fc07b1e2a9dL) != 0L || (active2 & 0xc50fff7fff3fffe0L) != 0L || (active3 & 0xf6ff80000003bfefL) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 268;
               jjmatchedPos = 7;
            }
            return 50;
         }
         if ((active0 & 0x4100000202000100L) != 0L || (active1 & 0x108481d562L) != 0L || (active2 & 0xc00000L) != 0L || (active3 & 0x10L) != 0L)
            return 50;
         return -1;
      case 8:
         if ((active0 & 0xc3f0bfcfcba8000L) != 0L || (active1 & 0x78213fc07b1f1515L) != 0L || (active2 & 0xc50fbf77ffffffa0L) != 0L || (active3 & 0xf6ff80000003bfefL) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 268;
               jjmatchedPos = 8;
            }
            return 50;
         }
         if ((active0 & 0x3200800100000000L) != 0L || (active1 & 0x80000000002a88L) != 0L || (active2 & 0x400800000040L) != 0L)
            return 50;
         return -1;
      case 9:
         if ((active0 & 0x810000800080000L) != 0L || (active1 & 0x680100c028120000L) != 0L || (active2 & 0x402110000000aa0L) != 0L || (active3 & 0x8008000000000022L) != 0L)
            return 50;
         if ((active0 & 0x42f0bf4fcb28000L) != 0L || (active1 & 0x10203f00530d3f15L) != 0L || (active2 & 0xc10dae77fffff500L) != 0L || (active3 & 0x76f780000003bfcdL) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 268;
               jjmatchedPos = 9;
            }
            return 50;
         }
         return -1;
      case 10:
         if ((active0 & 0x42b03f43c328000L) != 0L || (active1 & 0x102036805b0c3f10L) != 0L || (active2 & 0xc10dae760efff700L) != 0L || (active3 & 0x76f7800000039d0dL) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 268;
               jjmatchedPos = 10;
            }
            return 50;
         }
         if ((active0 & 0x40800c0800000L) != 0L || (active1 & 0x90000010005L) != 0L || (active2 & 0x1f1000000L) != 0L || (active3 & 0x22c0L) != 0L)
            return 50;
         return -1;
      case 11:
         if ((active0 & 0x2801c000100000L) != 0L || (active1 & 0x1000008003001100L) != 0L || (active2 & 0x100020006000500L) != 0L)
            return 50;
         if ((active0 & 0x4030234b8228000L) != 0L || (active1 & 0x203600580c2e10L) != 0L || (active2 & 0xc00dac76e8fff200L) != 0L || (active3 & 0x76f7800000039d0dL) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 268;
               jjmatchedPos = 11;
            }
            return 50;
         }
         return -1;
      case 12:
         if ((active0 & 0x403023480028000L) != 0L || (active1 & 0x3600480c0c00L) != 0L || (active2 & 0xc009a44688fff400L) != 0L || (active3 & 0x36e7800000039c08L) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 268;
               jjmatchedPos = 12;
            }
            return 50;
         }
         if ((active0 & 0x38000000L) != 0L || (active1 & 0x20000010002210L) != 0L || (active2 & 0x4083060000200L) != 0L || (active3 & 0x4010000000000105L) != 0L)
            return 50;
         return -1;
      case 13:
         if ((active0 & 0x4030024a0028000L) != 0L || (active1 & 0x2600480c0c00L) != 0L || (active2 & 0xc009a444c8c0f400L) != 0L || (active3 & 0x30e7000000039c08L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 13;
            return 50;
         }
         if ((active0 & 0x21000000000L) != 0L || (active1 & 0x100000000000L) != 0L || (active2 & 0x2003f0000L) != 0L || (active3 & 0x600800000000000L) != 0L)
            return 50;
         return -1;
      case 14:
         if ((active0 & 0x1000400020000L) != 0L || (active1 & 0xc0400L) != 0L || (active2 & 0x8840400c03400L) != 0L || (active3 & 0x1040000000000000L) != 0L)
            return 50;
         if ((active0 & 0x4020020a0008000L) != 0L || (active1 & 0x260048000800L) != 0L || (active2 & 0xc0012040c800c000L) != 0L || (active3 & 0x20a7000000039c08L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 14;
            return 50;
         }
         return -1;
      case 15:
         if ((active0 & 0x400000080008000L) != 0L || (active1 & 0x200008000800L) != 0L || (active2 & 0xc000000008000000L) != 0L || (active3 & 0x2000000000010800L) != 0L)
            return 50;
         if ((active0 & 0x2002020000000L) != 0L || (active1 & 0x60040000000L) != 0L || (active2 & 0x12040c000c000L) != 0L || (active3 & 0xa7000000029408L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 15;
            return 50;
         }
         return -1;
      case 16:
         if ((active0 & 0x2002020000000L) != 0L || (active1 & 0x20000000000L) != 0L || (active2 & 0x2000c000c000L) != 0L || (active3 & 0x22000000029008L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 16;
            return 50;
         }
         if ((active1 & 0x40040000000L) != 0L || (active2 & 0x1004000000000L) != 0L || (active3 & 0x85000000000400L) != 0L)
            return 50;
         return -1;
      case 17:
         if ((active0 & 0x2002000000000L) != 0L || (active1 & 0x20000000000L) != 0L || (active2 & 0xc000c000L) != 0L || (active3 & 0x2000000029008L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 17;
            return 50;
         }
         if ((active0 & 0x20000000L) != 0L || (active2 & 0x200000000000L) != 0L || (active3 & 0x20000000000000L) != 0L)
            return 50;
         return -1;
      case 18:
         if ((active0 & 0x2000000000000L) != 0L || (active2 & 0x8000c000L) != 0L || (active3 & 0x2000000020008L) != 0L)
            return 50;
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x20000000000L) != 0L || (active2 & 0x40000000L) != 0L || (active3 & 0x9000L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 18;
            return 50;
         }
         return -1;
      case 19:
         if ((active1 & 0x20000000000L) != 0L || (active2 & 0x40000000L) != 0L || (active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 19;
            return 50;
         }
         if ((active0 & 0x2000000000L) != 0L || (active3 & 0x1000L) != 0L)
            return 50;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 282;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1007ffffffc0000L, 0x200000000L);
      case 37:
         jjmatchedKind = 301;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x40000000000000L);
      case 38:
         jjmatchedKind = 298;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x8000800000000L);
      case 40:
         return jjStopAtPos(0, 271);
      case 41:
         return jjStopAtPos(0, 272);
      case 42:
         jjmatchedKind = 296;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x2000000000000L);
      case 43:
         jjmatchedKind = 294;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x801000000000L);
      case 44:
         return jjStopAtPos(0, 277);
      case 45:
         jjmatchedKind = 295;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1002000000000L);
      case 46:
         jjmatchedKind = 278;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x400000000000000L);
      case 47:
         jjmatchedKind = 297;
         return jjMoveStringLiteralDfa1_0(0x8L, 0x0L, 0x0L, 0x0L, 0x4000000000000L);
      case 58:
         return jjStopAtPos(0, 285);
      case 60:
         jjmatchedKind = 281;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x80400080000000L);
      case 61:
         jjmatchedKind = 280;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x40000000L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x300000100000000L);
      case 63:
         return jjStopAtPos(0, 284);
      case 64:
         return jjStopAtPos(0, 279);
      case 91:
         return jjStopAtPos(0, 275);
      case 93:
         return jjStopAtPos(0, 276);
      case 94:
         jjmatchedKind = 300;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x20000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200000003c000L, 0x0L, 0x0L, 0x400000000000000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3c0000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4001f0fc00000L, 0x0L, 0x1000000000000000L, 0x10000000000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xffc000000000L, 0x0L, 0x0L, 0x1000000000000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x7f8000000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0xf800000000000100L, 0x1fffbL, 0x0L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x10000f0000000L, 0x20000e0000L, 0x2000100000L, 0xe0000000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fffe00000L, 0xc00000L, 0x204000000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffc000000000L, 0x0L, 0x8000000000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000L, 0x0L, 0x800000030000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000000000L, 0x0L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000L, 0x0L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f0000000000000L, 0x0L, 0x3000L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x0L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf800000000000004L, 0xfL, 0x8000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2000000800L, 0x0L, 0x6ffffdfff2ffff0L, 0x8000000000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000000000L, 0x0L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xe100000000000000L, 0x200000000001fL, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7800000000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xfe0L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x4000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 273);
      case 124:
         jjmatchedKind = 299;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x10000400000000L);
      case 125:
         return jjStopAtPos(0, 274);
      case 126:
         return jjStopAtPos(0, 283);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active4 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 291);
         break;
      case 42:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 3, 1);
         break;
      case 43:
         if ((active4 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 292);
         break;
      case 45:
         if ((active4 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 293);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000000L);
      case 60:
         if ((active4 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 302;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000000000L);
      case 61:
         if ((active4 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 286);
         else if ((active4 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 287);
         else if ((active4 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 288);
         else if ((active4 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 289);
         else if ((active4 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 303);
         else if ((active4 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 304);
         else if ((active4 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 305);
         else if ((active4 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 306);
         else if ((active4 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 307);
         else if ((active4 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 308);
         else if ((active4 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 309);
         else if ((active4 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 310);
         break;
      case 62:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x300000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c00000L, active1, 0xf400c000000000L, active2, 0x800000000000000L, active3, 0x900100000430000L, active4, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L, active2, 0L, active3, 0x1000000L, active4, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000L, active1, 0L, active2, 0L, active3, 0x80020000000L, active4, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10fe0f0000800L, active1, 0xf8010000000e0004L, active2, 0x7fffff3ffd77L, active3, 0xe100059020b000L, active4, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7c00000L, active2, 0L, active3, 0x80000L, active4, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000002000000L, active1, 0L, active2, 0x3800000000000L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xf800f00000000000L, active1, 0x1f0000107ff9L, active2, 0xc000000000000L, active3, 0x700083800e800020L, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000004000000L, active1, 0x2L, active2, 0x10000000000000L, active3, 0x400000000000000L, active4, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0x7000000000L, active4, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x38000000000000L, active1, 0xff8000000L, active2, 0xe100000000c00000L, active3, 0x20600000000001fL, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x108000000L, active1, 0x102e02000000000L, active2, 0L, active3, 0x8010000000000000L, active4, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0x8000000044000L, active4, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e00300000L, active1, 0L, active2, 0L, active3, 0xfc0L, active4, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0x600000100000L, active4, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2e0000000000000L, active3, 0x40000000000L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20100L, active1, 0x608000000018000L, active2, 0x400000000000280L, active3, 0x40000000L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000L, active4, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x7c0000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 124:
         if ((active4 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 290);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active4 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 314);
         break;
      case 61:
         if ((active4 & 0x80000000000000L) != 0L)
            return jjStopAtPos(2, 311);
         else if ((active4 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 312);
         break;
      case 62:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000002100000L, active1, 0x7800200000400000L, active2, 0x800L, active3, 0x1008007200040000L, active4, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x400000000000280L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000200000800L, active1, 0x1f0000000000L, active2, 0xff570L, active3, 0x8000000100000000L, active4, 0L);
      case 68:
      case 100:
         if ((active3 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 216);
         return jjMoveStringLiteralDfa3_0(active0, 0x18000L, active1, 0x100000L, active2, 0x8L, active3, 0x100000000401000L, active4, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x384001c04000000L, active1, 0x800000L, active2, 0x10000000000000L, active3, 0x6c0820000000L, active4, 0L);
      case 70:
      case 102:
         if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0x1000000L, active2, 0L, active3, 0x400003000c000000L, active4, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0xf0c00000000000L, active2, 0x1L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0x400000000000000L, active2, 0xe000000000000000L, active3, 0x202000000080fcfL, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x800207c000c00000L, active1, 0x7ff9L, active2, 0xc000000000000L, active3, 0x400000080000000L, active4, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0x4000000000000L, active2, 0L, active3, 0x10000000000000L, active4, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x7800000000000100L, active1, 0xc000018000L, active2, 0x1000002L, active3, 0x8050830020L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0x200000L, active2, 0x3800000000000L, active3, 0L, active4, 0L);
      case 80:
      case 112:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 113, 50);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 120, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000101000000L, active1, 0L, active2, 0L, active3, 0x2000100000000000L, active4, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000L, active4, 0L);
      case 82:
      case 114:
         if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 251, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0xf00000000000L, active1, 0x2000000L, active2, 0xae0000000000000L, active3, 0x400000010L, active4, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2010000fc000004L, active2, 0x100000000c00000L, active3, 0x4800000006000L, active4, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x10820f0020000L, active1, 0x8002f000e0000L, active2, 0x7ffffe300004L, active3, 0xe1000000000000L, active4, 0L);
      case 85:
      case 117:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 188, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000000L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000L, active4, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active4 & 0x200000000000000L) != 0L)
            return jjStopAtPos(3, 313);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400081c04000000L, active1, 0L, active2, 0x100000002000002L, active3, 0x1600000000000L, active4, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000008000L, active1, 0x400000L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x304000200000100L, active1, 0x600018000L, active2, 0x24e00000f4300000L, active3, 0x88807000840000L, active4, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x7800002030000000L, active1, 0x7800200000020000L, active2, 0x701000001L, active3, 0x1100000054400020L, active4, 0L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 114, 50);
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x7c000000000L, active1, 0xe01f0002107ffdL, active2, 0x1c003800000000L, active3, 0x200010L, active4, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000000L, active1, 0x8000800040000L, active2, 0xc000000000L, active3, 0x20000020000000L, active4, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc000000000L, active2, 0x800000000000000L, active3, 0L, active4, 0L);
      case 72:
      case 104:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 50);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 121, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x1005000000L, active2, 0x8L, active3, 0x4000000000030000L, active4, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0L);
      case 76:
      case 108:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L, active2, 0x200000000000000L, active3, 0x40080000001000L, active4, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000000000L, active1, 0L, active2, 0L, active3, 0x70000000000L, active4, 0L);
      case 78:
      case 110:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x2300000L, active1, 0L, active2, 0xc000000000000000L, active3, 0x200000808000fL, active4, 0L);
      case 79:
      case 111:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 101, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000060000L, active1, 0x8000000100000000L, active2, 0x30000000000L, active3, 0x400000000000000L, active4, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L, active2, 0x40000000000L, active3, 0x10100000000000L, active4, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x84000L, active1, 0x800000L, active2, 0x180000000800L, active3, 0x2000000e00000000L, active4, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000010000L, active1, 0x1400000000002L, active2, 0x600000000280L, active3, 0x8080100000L, active4, 0L);
      case 84:
      case 116:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 122, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x100001000800L, active1, 0x8000f8080000L, active2, 0xcff570L, active3, 0x204000000004fc0L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0xa000L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x3800000000000L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x402000080000L, active1, 0x1000038000000L, active2, 0x400000100000000L, active3, 0x44030000080000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000001L, active2, 0L, active3, 0x800800002000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000020000L, active1, 0x20000000000008L, active2, 0x800L, active3, 0x200000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0L, active2, 0L, active3, 0x1000000008000000L);
      case 69:
      case 101:
         if ((active3 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 223);
         return jjMoveStringLiteralDfa5_0(active0, 0x900000000000L, active1, 0x40c0c00000080010L, active2, 0xa00180600000280L, active3, 0x8108044008fc0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000100000000L, active1, 0L, active2, 0x100000000000000L, active3, 0x80000030000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x2200000L, active1, 0L, active2, 0L, active3, 0x10L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x200200000000L, active1, 0x2L, active2, 0x200000000000L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800c1810800L, active1, 0x808000000000000L, active2, 0xc040000ff570L, active3, 0x1000030400000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L, active2, 0L, active3, 0x40000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000030000000L, active1, 0x200005020000L, active2, 0x40000000001L, active3, 0x4010000000801000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xe00000000L, active2, 0x60000001000002L, active3, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4401000000040000L, active1, 0x1f1000000000L, active2, 0xc000000000000L, active3, 0x200000000L);
      case 79:
      case 111:
         if ((active3 & 0x100000000L) != 0L)
            return jjStopAtPos(4, 224);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0x8000000000400020L, active2, 0x20000080f0000000L, active3, 0x2000000400000020L);
      case 80:
      case 112:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 50);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 180, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000L, active2, 0x80000000000000L, active3, 0x300040000000000L);
      case 82:
      case 114:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 131, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x30000004008000L, active1, 0x3000000000801544L, active2, 0x3808000004L, active3, 0x607000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0xc000004000L, active2, 0xc000000000000000L, active3, 0x200000000000fL);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x7dc00000100L, active1, 0x80018000L, active2, 0x4c00000L, active3, 0x100000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L, active2, 0x1010002300000L, active3, 0xa0000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x902000000000000L, active1, 0x102a80L, active2, 0x2000000000000L, active3, 0x8400000000000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000008000L, active1, 0x20200000000000L, active2, 0x8000000L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L, active2, 0x80000000000L, active3, 0x40000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x280L, active3, 0x630000001000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000080000L, active1, 0x1000000000L, active2, 0x2000000000000000L, active3, 0x2000000000000010L);
      case 69:
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 129, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x403803de06000000L, active1, 0x3000000005005540L, active2, 0x100220001000000L, active3, 0x4010000008130000L);
      case 70:
      case 102:
         if ((active3 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 218);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStopAtPos(5, 220);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStopAtPos(5, 222);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000020000L, active2, 0x100000000000L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L, active2, 0x800L, active3, 0x40000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2800000100100100L, active1, 0x118002L, active2, 0x2000000000000L, active3, 0x8000080200000040L);
      case 76:
      case 108:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 128, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000800f0020000L, active1, 0x8000038040008L, active2, 0x404004000000L, active3, 0x305000000084000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L, active2, 0xf0000000L, active3, 0L);
      case 78:
      case 110:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 130, 50);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 185, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x8800000L, active1, 0x4800000000000000L, active2, 0x1808000000000L, active3, 0x20100020400000L);
      case 79:
      case 111:
         if ((active3 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 228;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200001000800L, active1, 0x2800000L, active2, 0xff570L, active3, 0x6800000000L);
      case 80:
      case 112:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000020L, active2, 0x440000000000000L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 50);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStopAtPos(5, 226);
         return jjMoveStringLiteralDfa6_0(active0, 0x2800000000000L, active1, 0x40402a90L, active2, 0x3800300000L, active3, 0x80008000000780L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0x1f0000000000L, active2, 0L, active3, 0x40000000000a000L);
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 50);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 50);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 110, 50);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 127, 50);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 187, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000200000L, active1, 0xc000000000L, active2, 0xc00c010702000000L, active3, 0xa00000000000fL);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L, active2, 0x40000000000L, active3, 0x800000a00800L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L, active2, 0L, active3, 0x1000000000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L);
      case 88:
      case 120:
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x80800000000000L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 183, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000L, active2, 0xc00000L, active3, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0x1540L, active2, 0xc000000600000000L, active3, 0x200000000000dL);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0L, active2, 0x4000000L, active3, 0x20000000400000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L, active2, 0L, active3, 0x100000840000L);
      case 69:
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 50);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 115, 50);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 189, 50);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 206, 50);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStopAtPos(6, 221);
         return jjMoveStringLiteralDfa7_0(active0, 0x6000000c8000000L, active1, 0x811f0001004024L, active2, 0x404100000000L, active3, 0x1048002000000780L);
      case 70:
      case 102:
         if ((active3 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 219);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0x1L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x30000000000000L, active1, 0x3000000000000000L, active2, 0x40000000000L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x600000001000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10480c000080000L, active1, 0x800000000022a80L, active2, 0x5000000300000L, active3, 0x40000080020L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x20000038040000L, active2, 0x200000000000L, active3, 0x4080000000010L);
      case 77:
      case 109:
         if ((active3 & 0x100000L) != 0L)
            return jjStopAtPos(6, 212);
         break;
      case 78:
      case 110:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 50);
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000108000L, active1, 0x200004100002L, active2, 0x20000080ff560L, active3, 0x8000000200000840L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1002000000220100L, active1, 0x1042018008L, active2, 0x83802000000L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0x80080000L, active2, 0x100f0c00800L, active3, 0x2L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000030004000000L, active1, 0xc000800010L, active2, 0x20000000000L, active3, 0x80030000000000L);
      case 83:
      case 115:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 182, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000800000L, active1, 0L, active2, 0x100800001000000L, active3, 0x1000800030000L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 50);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 86, 50);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 111, 50);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 167, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L, active1, 0L, active2, 0x400000000000280L, active3, 0x10808000208000L);
      case 85:
      case 117:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 98, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L, active2, 0x8000000000000L, active3, 0x2300004000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x30000000L, active1, 0x4000000000000000L, active2, 0x100000000000L, active3, 0x4000000000000000L);
      case 87:
      case 119:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x14000000800L, active3, 0x1002L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0x1100000000000L, active2, 0L, active3, 0x5000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000L, active2, 0x2000000L, active3, 0x2000000000000020L);
      case 68:
      case 100:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x801000000008000L, active1, 0x1000010028101500L, active2, 0x2000008000000L, active3, 0x8000000000000000L);
      case 69:
      case 101:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x200000L) != 0L)
            return jjStopAtPos(7, 213);
         else if ((active3 & 0x800000L) != 0L)
            return jjStopAtPos(7, 215);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStopAtPos(7, 227);
         else if ((active3 & 0x80000000000L) != 0L)
            return jjStopAtPos(7, 235);
         return jjMoveStringLiteralDfa8_0(active0, 0x30130080000L, active1, 0L, active2, 0xc00020L, active3, 0x4090000000008000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000200000L, active1, 0x20000080004L, active2, 0L, active3, 0x100000000000L);
      case 71:
      case 103:
         if ((active3 & 0x200000000L) != 0L)
            return jjStopAtPos(7, 225);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0x200040000000L, active2, 0x5a500L, active3, 0x300000000000780L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 50);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 65, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000400000000L, active1, 0xc000000000L, active2, 0x4001406000002c0L, active3, 0x400000000000840L);
      case 75:
      case 107:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 50);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 78, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 196, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0x20040000000000L, active2, 0xc000200000000000L, active3, 0x4204000040000dL);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000L);
      case 78:
      case 110:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 50);
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x40000c008000000L, active1, 0x80000000010000L, active2, 0xd400000300000L, active3, 0x6000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000800000000L, active1, 0x10L, active2, 0x80004000000L, active3, 0x30000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0x200000000000L);
      case 82:
      case 114:
         if ((active3 & 0x40000L) != 0L)
            return jjStopAtPos(7, 210);
         return jjMoveStringLiteralDfa8_0(active0, 0x80004000000L, active1, 0L, active2, 0x38f0000000L, active3, 0x1000400000000000L);
      case 83:
      case 115:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 87, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0x3000000000020000L, active1, 0x6800000000000009L, active2, 0x1010a5000L, active3, 0x2000L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 50);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 50);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 90, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000c0800000L, active1, 0x80002022a80L, active2, 0x100800000000000L, active3, 0x20800000030000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 87:
      case 119:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 100, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0x8000000000000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L, active1, 0x50000040000L, active2, 0x101000000L, active3, 0x40208000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000000100L, active2, 0L, active3, 0x80L);
      case 68:
      case 100:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 119, 50);
         else if ((active3 & 0x2000000000L) != 0L)
            return jjStopAtPos(8, 229);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L, active1, 0L, active2, 0x800000000000L, active3, 0x10014000010100L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 60, 50);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 67, 50);
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x80000L) != 0L)
            return jjStopAtPos(8, 211);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStopAtPos(8, 234);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000020000L, active1, 0x80000032a00L, active2, 0x1000f00ff000L, active3, 0x400000000400L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x30000000000L, active1, 0L, active2, 0x800000L, active3, 0x2L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x108c0c0008000L, active1, 0x29080005L, active2, 0x8000008000000L, active3, 0x320100000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 57, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0L, active2, 0xc000003606000000L, active3, 0x200000000000dL);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 134, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000800080000L, active1, 0xc000000000L, active2, 0x40000000020L, active3, 0x80020000000800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x800001004000000L, active1, 0x1020010100000L, active2, 0x402000000000280L, active3, 0x8000800000000020L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x430200000L, active1, 0x40000010L, active2, 0x100020000000500L, active3, 0x4000000000001000L);
      case 83:
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 32, 50);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 163, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x5000000700000L, active3, 0x1000000000020240L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 61, 50);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 174, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000008100000L, active1, 0x6800000000000000L, active2, 0x94000000800L, active3, 0x2008000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000400L, active2, 0L, active3, 0x5000000400000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0L, active2, 0x200000000000L, active3, 0x2000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000001000L, active2, 0L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000L);
      case 89:
      case 121:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L, active1, 0x20200000000000L, active2, 0x200000000000L, active3, 0x1000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0x2000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000000L, active2, 0x8100000000000000L, active3, 0x8000000000L);
      case 68:
      case 100:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 133, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0xa000000000000L, active1, 0L, active2, 0L, active3, 0x40020000400000L);
      case 69:
      case 101:
         if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(9, 193, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0x400100000L, active1, 0x40000000L, active2, 0x4000803000c00000L, active3, 0x1400000a000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0x400000000000000L);
      case 71:
      case 103:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000L, active2, 0x1000000L, active3, 0L);
      case 72:
      case 104:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 139, 50);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 168, 50);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0x1000000000000081L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000800000L, active1, 0x12080004L, active2, 0L, active3, 0x100000000000L);
      case 77:
      case 109:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(9, 81, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0xc0000000L, active1, 0L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 186, 50);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 197, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0x80000008000L, active1, 0x40000010000L, active2, 0x8000008000200L, active3, 0x300800000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000200000L, active1, 0x1000000000001000L, active2, 0x6000500L, active3, 0x20000000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000010000L);
      case 82:
      case 114:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 123, 50);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 125, 50);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 126, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0x1001004000000L, active1, 0x20008000000L, active2, 0L, active3, 0x200000000000L);
      case 83:
      case 115:
         if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 243, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0x40000c030000000L, active1, 0x1000000L, active2, 0x6f0000000L, active3, 0x4000000000000808L);
      case 84:
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 19, 50);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 35, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L, active1, 0x10000040410L, active2, 0x50040003ff000L, active3, 0x95000000000244L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800L, active2, 0x40000000000L, active3, 0x20000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L, active1, 0L, active2, 0x100000000L, active3, 0x2000000000000000L);
      case 87:
      case 119:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 59, 50);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 84, 50);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 172, 50);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 177, 50);
         else if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 255, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L, active1, 0x2000L, active2, 0L, active3, 0x100L);
      case 88:
      case 120:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 112, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000000L, active2, 0L, active3, 0x400L);
      case 89:
      case 121:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 52, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 104, 50);
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L, active1, 0x2000000L, active2, 0x8004000000000000L, active3, 0x80000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x2400000000L, active1, 0x20020000000000L, active2, 0L, active3, 0x9001L);
      case 68:
      case 100:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(10, 80, 50);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0x140000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(10, 64, 50);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(10, 66, 50);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 152, 50);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 160, 50);
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStopAtPos(10, 236);
         return jjMoveStringLiteralDfa11_0(active0, 0x1014088000000L, active1, 0x80010L, active2, 0x200L, active3, 0x2010020000400004L);
      case 70:
      case 102:
         if ((active3 & 0x4000000000L) != 0L)
            return jjStopAtPos(10, 230);
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStopAtPos(10, 232);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400L, active2, 0x3000L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L, active1, 0x240000000000L, active2, 0x8000000L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000030020000L, active1, 0L, active2, 0xc000L, active3, 0x4400000000010000L);
      case 76:
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(10, 23, 50);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0x400000000000L);
      case 78:
      case 110:
         if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(10, 199, 50);
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L, active1, 0L, active2, 0x40000000000L, active3, 0x20000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L, active1, 0x100010002000L, active2, 0L, active3, 0x1000000000000100L);
      case 80:
      case 112:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 50, 50);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x100000400000000L, active3, 0x20400L);
      case 82:
      case 114:
         if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(10, 198, 50);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(10, 201, 50);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(10, 205, 50);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000008001000L, active2, 0x204004000000L, active3, 0x8000000000L);
      case 83:
      case 115:
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L, active1, 0x40000000L, active2, 0x80000e20c0000L, active3, 0x200200000000000L);
      case 84:
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 43, 50);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 107, 50);
         return jjMoveStringLiteralDfa11_0(active0, 0x400009000000000L, active1, 0x1000900L, active2, 0x820000f30000L, active3, 0x5800000000800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L, active1, 0x8000000000L, active2, 0x500L, active3, 0x2000000000008L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x3200000000L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L, active1, 0L, active2, 0x4000000000000000L, active3, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(11, 26);
         break;
      case 49:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400L, active2, 0L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x880000000000L, active3, 0x20400000010c00L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8L);
      case 67:
      case 99:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 38, 50);
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000L, active1, 0L, active2, 0x200000000000L, active3, 0L);
      case 68:
      case 100:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(11, 76, 50);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 124, 50);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x280000000400000L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 53, 50);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(11, 72, 50);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(11, 153, 50);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 169, 50);
         else if ((active3 & 0x200000000000L) != 0L)
            return jjStopAtPos(11, 237);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x220008000000L, active2, 0x4001003000030000L, active3, 0x800000000000L);
      case 70:
      case 102:
         if ((active3 & 0x20000000000L) != 0L)
            return jjStopAtPos(11, 233);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(11, 89, 50);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L, active1, 0L, active2, 0x42880c0000L, active3, 0x100000000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L, active1, 0x20000000000000L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x20080000000L, active1, 0x100000000000L, active2, 0x4040000003000L, active3, 0x400000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L, active1, 0xc0000L, active2, 0xc200L, active3, 0x1000000000000000L);
      case 79:
      case 111:
         if ((active3 & 0x8000000000L) != 0L)
            return jjStopAtPos(11, 231);
         return jjMoveStringLiteralDfa12_0(active0, 0x30000000L, active1, 0L, active2, 0x60000000L, active3, 0x4005000000000001L);
      case 80:
      case 112:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 103, 50);
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x8000000000000400L, active3, 0x20000L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 39, 50);
         return jjMoveStringLiteralDfa12_0(active0, 0x403000000000000L, active1, 0x10002000L, active2, 0x400000000L, active3, 0x2040000000000100L);
      case 83:
      case 115:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 88, 50);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(11, 154, 50);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40040000000L, active2, 0L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(11, 20, 50);
         return jjMoveStringLiteralDfa12_0(active0, 0x400200000L, active1, 0x200L, active2, 0x8000000c00000L, active3, 0x2000000001000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000L);
      case 87:
      case 119:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 51, 50);
         break;
      case 88:
      case 120:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L, active1, 0x10L, active2, 0L, active3, 0x10000000000004L);
      case 89:
      case 121:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 40, 50);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 184, 50);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x300000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, active3, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(12, 21);
         break;
      case 49:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L);
      case 54:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400L, active2, 0L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0xc0000L, active2, 0x8000000003000L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000008L);
      case 68:
      case 100:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(12, 77, 50);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(12, 137, 50);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(12, 200, 50);
         return jjMoveStringLiteralDfa13_0(active0, 0x20000L, active1, 0L, active2, 0L, active3, 0xa0000000000000L);
      case 69:
      case 101:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(12, 73, 50);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x200c00400L, active3, 0x440000000001000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200040000000L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 171, 50);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000000L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x402000000000000L, active1, 0L, active2, 0x800400000000L, active3, 0x200000000400000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000000L);
      case 76:
      case 108:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 164, 50);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 165, 50);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 178, 50);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 12;
         }
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(12, 192, 50);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 254, 50);
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000L, active1, 0L, active2, 0x4000000000000000L, active3, 0x5000000000400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x2480000000L, active1, 0x100000000000L, active2, 0x240080000000L, active3, 0x20000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x300000L, active3, 0L);
      case 82:
      case 114:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 12;
         }
         else if ((active3 & 0x100000000000000L) != 0L)
            return jjStopAtPos(12, 248);
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L, active1, 0L, active2, 0x40000000L, active3, 0L);
      case 83:
      case 115:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(12, 92, 50);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 117, 50);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20000000000L, active2, 0xc000L, active3, 0x2000000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(12, 27, 50);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(12, 68, 50);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(12, 194, 50);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 244, 50);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40000000000L, active2, 0x8001000000000000L, active3, 0x2000000008000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x21000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x30000L, active3, 0x800000000000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0xc0000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2, active3, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L, active1, 0L, active2, 0x4001040008000000L, active3, 0x10008L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000L, active1, 0L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0x20000000000400L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 41, 50);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(13, 146, 50);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(13, 147, 50);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(13, 148, 50);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(13, 149, 50);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStopAtPos(13, 238);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x20000000000L, active2, 0L, active3, 0x1000000000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x3000L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000000000L, active2, 0x8000000000000000L, active3, 0x2000000000008000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8000000L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000L, active1, 0x40000400L, active2, 0x8800000000000L, active3, 0x800L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0xc0000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x402000000000000L, active1, 0L, active2, 0x200480000400L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000020000L, active1, 0L, active2, 0L, active3, 0x2000000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 108, 50);
         else if ((active3 & 0x400000L) != 0L)
            return jjStopAtPos(13, 214);
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 249, 50);
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L, active1, 0x40000000000L, active2, 0L, active3, 0x80000000021000L);
      case 83:
      case 115:
         if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 250, 50);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 36, 50);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(13, 144, 50);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(13, 145, 50);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 239, 50);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0xc000L, active3, 0x5000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0L);
      case 87:
      case 119:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(13, 161, 50);
         break;
      case 88:
      case 120:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0xc00000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, active2, active3, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000L, active1, 0x40000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(14, 138, 50);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 170, 50);
         break;
      case 69:
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(14, 74, 50);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(14, 82, 50);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(14, 83, 50);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x8000000L, active2, 0L, active3, 0x85000000000800L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000008000L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x40000000000L, active2, 0x1000040000000L, active3, 0x1000L);
      case 76:
      case 108:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 179, 50);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x220000000800L, active2, 0x80000000L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000L, active1, 0L, active2, 0x8000000000000000L, active3, 0x2000000000008000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 48, 50);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000010000L);
      case 83:
      case 115:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(14, 140, 50);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(14, 141, 50);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 175, 50);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 246, 50);
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0x400L);
      case 84:
      case 116:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(14, 150, 50);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(14, 151, 50);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(14, 162, 50);
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000L, active1, 0L, active2, 0x20400000c000L, active3, 0x20000L);
      case 87:
      case 119:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(14, 17, 50);
         break;
      case 89:
      case 121:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(14, 34, 50);
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 252, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(13, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, active2, active3, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000L, active1, 0L, active2, 0x40000000L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(15, 15, 50);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(15, 75, 50);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 109, 50);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(15, 155, 50);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 190, 50);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(15, 208, 50);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x20000000000L, active2, 0x204080000000L, active3, 0x20000000020000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(15, 31, 50);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0L);
      case 78:
      case 110:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 191, 50);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 253, 50);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0x8000L);
      case 82:
      case 114:
         if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(15, 203, 50);
         break;
      case 83:
      case 115:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 58, 50);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000001000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0x2000000000408L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x5000000000000L);
      case 89:
      case 121:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(15, 91, 50);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0xc000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(14, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1, active2, active3, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000020000000L, active1, 0L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x20000000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000L);
      case 71:
      case 103:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 106, 50);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0xc000L, active3, 0L);
      case 82:
      case 114:
         if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(16, 202, 50);
         break;
      case 83:
      case 115:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(16, 94, 50);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 166, 50);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 176, 50);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 247, 50);
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000000L);
      case 84:
      case 116:
         if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 240, 50);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 242, 50);
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0x1000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0x200000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(15, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1, active2, active3, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x8000c000L, active3, 0x8000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000L, active1, 0L, active2, 0L, active3, 0x1000L);
      case 76:
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(17, 29, 50);
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20008L);
      case 83:
      case 115:
         if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 245, 50);
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0L);
      case 84:
      case 116:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 173, 50);
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x20000000000L, active2, 0L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(16, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1, active2, active3, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x20000000000L, active2, 0x40000000L, active3, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 49, 50);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(18, 159, 50);
         break;
      case 78:
      case 110:
         if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(18, 195, 50);
         break;
      case 83:
      case 115:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(18, 142, 50);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(18, 143, 50);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(18, 209, 50);
         break;
      case 84:
      case 116:
         if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 241, 50);
         break;
      case 86:
      case 118:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(17, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1, active2, active3, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 37, 50);
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x20000000000L, active2, 0L, active3, 0L);
      case 83:
      case 115:
         if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(19, 204, 50);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(18, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1, active2, active3, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(20, 158, 50);
         break;
      case 76:
      case 108:
         if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(20, 207, 50);
         break;
      case 78:
      case 110:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 105, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1, active2, active3, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec30 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec31 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec36 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec38 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec39 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec40 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec43 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec44 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec45 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec46 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec47 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec48 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec49 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec50 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec51 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec52 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec53 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec54 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec55 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec56 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec57 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec58 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec59 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec60 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec61 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec62 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 83;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 268)
                        kind = 268;
                     jjCheckNAdd(50);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 46)
                     jjCheckNAdd(17);
                  else if (curChar == 35)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAddStates(13, 15);
                  }
                  else if (curChar == 59)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAddStates(16, 18);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 256)
                        kind = 256;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 256)
                        kind = 256;
                     jjCheckNAddStates(19, 23);
                  }
                  break;
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 3:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar != 59)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(16, 18);
                  break;
               case 6:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(16, 18);
                  break;
               case 7:
                  if ((0x2400L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 8:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 9:
               case 12:
                  if (curChar == 13)
                     jjCheckNAdd(8);
                  break;
               case 10:
                  if (curChar != 35)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(13, 15);
                  break;
               case 11:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(13, 15);
                  break;
               case 13:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 256)
                     kind = 256;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 256)
                     kind = 256;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 46)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 260)
                     kind = 260;
                  jjCheckNAddStates(24, 26);
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 260)
                     kind = 260;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if (curChar == 39)
                     jjCheckNAddStates(10, 12);
                  break;
               case 23:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 25:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 26:
                  if (curChar == 39 && kind > 265)
                     kind = 265;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 30);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 32:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 34:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(34, 37);
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 38:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 40:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 41:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 43:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 44:
                  if (curChar == 34 && kind > 267)
                     kind = 267;
                  break;
               case 45:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(38, 41);
                  break;
               case 46:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 47:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 49:
                  if (curChar != 36)
                     break;
                  if (kind > 268)
                     kind = 268;
                  jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 268)
                     kind = 268;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 21);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 58:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(59);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 260)
                     kind = 260;
                  jjCheckNAddTwoStates(59, 21);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar != 46)
                     break;
                  if (kind > 260)
                     kind = 260;
                  jjCheckNAddStates(45, 47);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 260)
                     kind = 260;
                  jjCheckNAddStates(45, 47);
                  break;
               case 64:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(65);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 260)
                     kind = 260;
                  jjCheckNAddTwoStates(65, 21);
                  break;
               case 66:
                  if (curChar != 48)
                     break;
                  if (kind > 256)
                     kind = 256;
                  jjCheckNAddStates(19, 23);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 256)
                     kind = 256;
                  jjCheckNAddTwoStates(68, 15);
                  break;
               case 69:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 256)
                     kind = 256;
                  jjCheckNAddTwoStates(69, 15);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 72:
                  if (curChar == 46)
                     jjCheckNAdd(73);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 75:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 260)
                     kind = 260;
                  jjCheckNAddTwoStates(76, 21);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 79:
                  if (curChar == 46)
                     jjCheckNAdd(80);
                  break;
               case 81:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(82);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 260)
                     kind = 260;
                  jjCheckNAddTwoStates(82, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 268)
                        kind = 268;
                     jjCheckNAdd(50);
                  }
                  else if (curChar == 96)
                     jjCheckNAddStates(31, 33);
                  break;
               case 2:
                  if (kind > 2)
                     kind = 2;
                  break;
               case 6:
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(16, 18);
                  break;
               case 11:
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(13, 15);
                  break;
               case 15:
                  if ((0x100000001000L & l) != 0L && kind > 256)
                     kind = 256;
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 21:
                  if ((0x5000000050L & l) != 0L && kind > 260)
                     kind = 260;
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 24:
                  if (curChar == 92)
                     jjAddStates(55, 57);
                  break;
               case 25:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 31:
                  if (curChar == 96)
                     jjCheckNAddStates(31, 33);
                  break;
               case 32:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 33:
                  if (curChar == 92)
                     jjAddStates(58, 60);
                  break;
               case 34:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 35:
                  if (curChar == 96 && kind > 266)
                     kind = 266;
                  break;
               case 41:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 42:
                  if (curChar == 92)
                     jjAddStates(61, 63);
                  break;
               case 43:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 268)
                     kind = 268;
                  jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 268)
                     kind = 268;
                  jjCheckNAdd(50);
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(64, 65);
                  break;
               case 57:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(66, 67);
                  break;
               case 63:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(68, 69);
                  break;
               case 67:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 256)
                     kind = 256;
                  jjCheckNAddTwoStates(68, 15);
                  break;
               case 70:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 71:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 73:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 74:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(72, 73);
                  break;
               case 77:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 78:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 80:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(74, 75);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 268)
                     kind = 268;
                  jjCheckNAdd(50);
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 2)
                     kind = 2;
                  break;
               case 6:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(16, 18);
                  break;
               case 11:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(13, 15);
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(10, 12);
                  break;
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(31, 33);
                  break;
               case 41:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               case 50:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 268)
                     kind = 268;
                  jjCheckNAdd(50);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 83 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_4(0x1000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_4(active0, 0x1000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_4(active0, 0x1000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_4(active0, 0x1000L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_4(active0, 0x1000L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_4(active0, 0x1000L);
      default :
         return 6;
   }
}
private int jjMoveStringLiteralDfa6_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_4(active0, 0x1000L);
      default :
         return 7;
   }
}
private int jjMoveStringLiteralDfa7_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_4(active0, 0x1000L);
      default :
         return 8;
   }
}
private int jjMoveStringLiteralDfa8_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_4(active0, 0x1000L);
      default :
         return 9;
   }
}
private int jjMoveStringLiteralDfa9_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(9, 12);
         break;
      default :
         return 10;
   }
   return 10;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x40L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_3(0x200L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_3(active0, 0x200L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_3(active0, 0x200L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_3(active0, 0x200L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_3(active0, 0x200L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_3(active0, 0x200L);
      default :
         return 6;
   }
}
private int jjMoveStringLiteralDfa6_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_3(active0, 0x200L);
      default :
         return 7;
   }
}
private int jjMoveStringLiteralDfa7_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_3(active0, 0x200L);
      default :
         return 8;
   }
}
private int jjMoveStringLiteralDfa8_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_3(active0, 0x200L);
      default :
         return 9;
   }
}
private int jjMoveStringLiteralDfa9_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_3(active0, 0x200L);
      default :
         return 10;
   }
}
private int jjMoveStringLiteralDfa10_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(10, 9);
         break;
      default :
         return 11;
   }
   return 11;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x20L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   52, 53, 21, 56, 57, 60, 61, 41, 42, 44, 23, 24, 26, 11, 7, 12, 
   6, 7, 9, 67, 69, 15, 70, 77, 17, 18, 21, 23, 24, 28, 26, 32, 
   33, 35, 32, 33, 37, 35, 41, 42, 46, 44, 52, 53, 21, 62, 63, 21, 
   71, 72, 78, 79, 80, 19, 20, 25, 27, 29, 34, 36, 38, 43, 45, 47, 
   54, 55, 58, 59, 64, 65, 73, 74, 75, 76, 81, 82, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec40[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec62[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", 
"\54", "\56", "\100", "\75", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", 
"\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", 
"\57", "\46", "\174", "\136", "\45", "\74\74", "\53\75", "\55\75", "\52\75", 
"\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75", 
"\76\76\76\75", "\56\56\56", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
   "IN_MULTI_LINE_FUNCTION",
   "IN_MULTI_LINE_SECTION",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, 1, 2, -1, 0, 0, -1, 3, 0, -1, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffd273L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xfffffffffff9e11L, 
};
static final long[] jjtoMore = {
   0x2d8cL, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[83];
private final int[] jjstateSet = new int[166];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public NSISParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public NSISParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 83; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 315)
         {
            jjmatchedKind = 315;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 10)
         {
            jjmatchedKind = 10;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 13)
         {
            jjmatchedKind = 13;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 2 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
